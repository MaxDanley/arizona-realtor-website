// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  address       String?
  licenseNumber String?   // Arizona Real Estate License Number
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  enrollments   Enrollment[]
  progress      CourseProgress[]
  quizAttempts  QuizAttempt[]
  examAttempts  ExamAttempt[]
  
  @@map("users")
}

// Course model for Arizona Real Estate courses
model Course {
  id              String    @id @default(cuid())
  title           String
  description     String
  courseType      CourseType
  duration        Int       // Duration in minutes
  price           Decimal   @db.Decimal(10, 2)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  chapters        Chapter[]
  enrollments     Enrollment[]
  progress        CourseProgress[]
  
  @@map("courses")
}

// Chapter model for course content
model Chapter {
  id          String    @id @default(cuid())
  courseId    String
  title       String
  content     String    // HTML content
  order       Int
  duration    Int       // Duration in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizzes     Quiz[]
  progress    ChapterProgress[]
  
  @@map("chapters")
}

// Quiz model for mid-chapter quizzes
model Quiz {
  id          String    @id @default(cuid())
  chapterId   String
  title       String
  description String?
  timeLimit   Int?      // Time limit in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    QuizAttempt[]
  
  @@map("quizzes")
}

// Question model for quiz questions
model Question {
  id          String      @id @default(cuid())
  quizId      String
  question    String
  type        QuestionType
  options     String[]    // JSON array of options
  correctAnswer String    // Correct answer
  explanation String?     // Explanation for the answer
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@map("questions")
}

// Enrollment model for user course enrollments
model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  status      EnrollmentStatus @default(ACTIVE)
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

// Course progress tracking
model CourseProgress {
  id              String    @id @default(cuid())
  userId          String
  courseId        String
  completedChapters Int     @default(0)
  totalChapters   Int
  timeSpent       Int       @default(0) // Time spent in minutes
  lastAccessed    DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("course_progress")
}

// Chapter progress tracking
model ChapterProgress {
  id          String    @id @default(cuid())
  userId      String
  chapterId   String
  isCompleted Boolean   @default(false)
  timeSpent   Int       @default(0) // Time spent in minutes
  lastAccessed DateTime @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  @@unique([userId, chapterId])
  @@map("chapter_progress")
}

// Quiz attempt tracking
model QuizAttempt {
  id          String    @id @default(cuid())
  userId      String
  quizId      String
  score       Int       // Score percentage
  timeSpent   Int       // Time spent in minutes
  answers     String    // JSON array of user answers
  completedAt DateTime @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@map("quiz_attempts")
}

// Exam attempt tracking (for final exams)
model ExamAttempt {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  score       Int       // Score percentage
  timeSpent   Int       // Time spent in minutes
  answers     String    // JSON array of user answers
  passed      Boolean
  completedAt DateTime @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("exam_attempts")
}

// Enums
enum CourseType {
  SALESPERSON_LICENSE
  CONTINUING_EDUCATION
  BROKER_LICENSE
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}
